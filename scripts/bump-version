#!/bin/zsh
# Bump version number in a Python package.
# This assumes the version number can be found in <package>/__init__.py with
# the format '__version__ = "1.2.3"'. This script finds the file with the
# version number, increments the last digit.

# Allows users to specify bumping major, minor or patch version.
# Defaults to patch.
if [[ $# -eq 0 ]]; then
    bump=patch
else
    bump=$1
    if [[ $bump != major && $bump != minor && $bump != patch ]]; then
        echo "!!! Invalid bump type: $bump !!!"
        exit 1
    fi
fi

package=$(basename $(pwd))
echo " ↪ Bumping version for package $package"

# Try to find version information in different file formats
if [[ -f "Cargo.toml" ]]; then
    init_file="Cargo.toml"
    version=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
    version_pattern="version = \"$version\""
else
    # Look for Python __init__.py with __version__
    init_file=$(find . -maxdepth 2 -name __init__.py -exec grep -H __version__ {} \; | cut -d: -f1)
    if [[ -n $init_file ]]; then
        version=$(grep __version__ $init_file | cut -d\" -f2)
        version_pattern="__version__ = \"$version\""
    fi
fi

# Check if we found a version
if [[ -z $init_file || -z $version ]]; then
    echo "!!! Could not find version information in supported files !!!"
    exit 1
fi
echo " ↪ Found version in $init_file"
echo " ↪ Current version is \033[1;31m$version\033[0m"

# Checks that version number is in the format x.y.z.
if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "!!! Invalid version number: $version !!!"
    exit 1
fi

# Bumps the version number.
major=$(echo $version | cut -d. -f1)
minor=$(echo $version | cut -d. -f2)
patch=$(echo $version | cut -d. -f3)
if [[ $bump == major ]]; then
    major=$((major + 1))
    minor=0
    patch=0
elif [[ $bump == minor ]]; then
    minor=$((minor + 1))
    patch=0
else
    patch=$((patch + 1))
fi
new_version="$major.$minor.$patch"
echo " ↪ New version is \033[1;32m$new_version\033[0m"

# Update the version number based on file type
tmp_file=$(mktemp)
if [[ $init_file == "Cargo.toml" ]]; then
    awk -v old="version = \"$version\"" -v new="version = \"$new_version\"" '{ sub(old, new) } 1' $init_file > $tmp_file
else
    awk -v old="$version" -v new="$new_version" '{ sub(old, new) } 1' $init_file > $tmp_file
fi
mv $tmp_file $init_file

# Commit file with new version number.
git add $init_file
git commit -m "Bump version to $new_version"
echo " ↪ Committed new version number"
