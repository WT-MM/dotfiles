#!/usr/bin/env python
"""Script which creates a new VSCode workspace from a given directory.

The new workspace is stored under `~/.code-workspaces` and is named after
the directory name. The workspace has two folders: the given directory and
the `~/.code-workspaces` directory itself.
"""

import json
import os
import shutil
from pathlib import Path


def main():
    """Create a new VSCode workspace from the current directory."""

    directory = Path.cwd()
    code_ws_directory = Path("~/.code-workspaces").expanduser()
    code_ws_directory.mkdir(exist_ok=True, parents=True)
    workspace_file = code_ws_directory / f"{directory.name}.code-workspace"
    for i in range(1, 1000):
        if not workspace_file.exists():
            break
        print(f"Workspace {workspace_file} already exists, trying another name")
        workspace_file = code_ws_directory / f"{directory.name}-{i}.code-workspace"

    settings = {}

    if "CONDA_PREFIX" in os.environ:
        conda_prefix = Path(os.environ["CONDA_PREFIX"])

        # Adds Python interpretter if currently inside a Conda environment.
        settings["python.defaultInterpreterPath"] = str(conda_prefix / "bin" / "python")

        # Adds CMake path, if CMake is installed in the Conda environment.
        if (cmake_path := shutil.which("cmake")) is not None and cmake_path.startswith(str(conda_prefix)):
            settings["cmake.cmakePath"] = cmake_path

    with open(workspace_file, "w", encoding="utf-8") as f:
        json.dump(
            {
                "folders": [
                    {
                        "name": directory.name,
                        "path": str(directory),
                    },
                    {
                        "name": "Workspaces",
                        "path": "code_ws_directory",
                    },
                ],
                "settings": settings,
            },
            f,
            indent=4,
            sort_keys=True,
        )

    print(f"Created workspace {workspace_file}")


if __name__ == "__main__":
    main()
