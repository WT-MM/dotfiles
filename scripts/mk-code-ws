#!/usr/bin/env python3
"""Script which creates a new VSCode workspace from a given directory.

The new workspace is stored under `~/.code-workspaces` and is named after
the directory name. The workspace has two folders: the given directory and
the `~/.code-workspaces` directory itself.
"""

import json
import os
import shutil
from pathlib import Path


def clean_name(dir_name: str) -> str:
    """Converts directory name into a name suitable for VSCode workspace.

    Args:
        dir_name: Directory name.

    Returns:
        Cleaned name.
    """

    # Replaces all non-alphanumeric characters with a space.
    name = "".join(c if c.isalnum() else " " for c in dir_name)

    # Removes all leading and trailing spaces.
    name = name.strip()

    # Replaces all consecutive spaces with a single space.
    name = " ".join(name.split())

    # Capitalizes the first letter of each word.
    name = " ".join(word.capitalize() for word in name.split(" "))

    return name


def main():
    """Create a new VSCode workspace from the current directory."""

    directory = Path.cwd()
    code_ws_directory = Path("~/.code-workspaces").expanduser()
    code_ws_directory.mkdir(exist_ok=True, parents=True)
    workspace_file = code_ws_directory / f"{directory.name}.code-workspace"
    for i in range(1, 1000):
        if not workspace_file.exists():
            break
        print(f"Workspace {workspace_file} already exists, trying another name")
        workspace_file = code_ws_directory / f"{directory.name}-{i}.code-workspace"

    settings = {}

    # Adds Ruff path if it is available.
    if (ruff_path := shutil.which("ruff")) is not None:
        settings["ruff.path"] = [ruff_path]

    # Adds NVCC path if available.
    if (nvcc_path := shutil.which("nvcc")) is not None:
        settings["cmake.configureSettings"]["CMAKE_CUDA_COMPILER"] = str(Path(nvcc_path).resolve())

    # Adds cmake-format path if available.
    if (cmake_format_path := shutil.which("cmake-format")) is not None:
        settings["cmakeFormat.exePath"] = cmake_format_path

    # Adds clang-format path if available.
    if (clang_format_path := shutil.which("clang-format")) is not None:
        settings["clang-format.executable"] = clang_format_path

    if "CONDA_PREFIX" in os.environ:
        conda_prefix = Path(os.environ["CONDA_PREFIX"])

        # Adds Python interpretter if currently inside a Conda environment.
        settings["python.defaultInterpreterPath"] = str(conda_prefix / "bin" / "python")

    # Adds CMake path, if CMake is installed.
    if (cmake_path := shutil.which("cmake")) is not None and cmake_path.startswith(str(conda_prefix)):
        settings["cmake.cmakePath"] = cmake_path

    cmake_configure_settings = {}
    cmake_prefix_paths = []

    # Gets PyTorch settings.
    try:
        import torch

        cmake_prefix_paths += [str(Path(torch.__file__).parent / "share" / "cmake")]

        try:
            major_ver, minor_ver = torch.cuda.get_device_capability()
            cmake_configure_settings["TORCH_CUDA_ARCH_LIST"] = f"'{major_ver}.{minor_ver}'"

        except AssertionError:
            pass

    except ModuleNotFoundError:
        pass

    # Gets Pybind11 settings.
    try:
        import pybind11

        cmake_prefix_paths += [pybind11.get_cmake_dir()]
    except ModuleNotFoundError:
        pass

    if cmake_prefix_paths:
        cmake_configure_settings["CMAKE_PREFIX_PATH"] = cmake_prefix_paths

    if cmake_configure_settings:
        settings["cmake.configureSettings"] = cmake_configure_settings

    config = {
        "folders": [
            {
                "name": clean_name(directory.name),
                "path": str(directory),
            },
            {
                "name": "Workspaces",
                "path": str(code_ws_directory),
            },
        ],
        "settings": settings,
    }

    with open(workspace_file, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2, sort_keys=True)

    print(f"Created workspace {workspace_file}")


if __name__ == "__main__":
    main()
